###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "AnimationDetection.baml": "// --- Enums ---\r\nenum Forces {\r\n  AirResistance \r\n  AppliedForce\r\n  BuoyantForce\r\n  CentripetalForce\r\n  CoriolisForce\r\n  ElectricForce\r\n  FrictionForce\r\n  GravitationalForce\r\n  LiftThrustForce\r\n  MagneticForce\r\n  NetForce\r\n  SpringForce\r\n  TensionForce\r\n  Torque\r\n  NormalForce\r\n}\r\n\r\n// enum Fields {\r\n//   AccelerationField\r\n//   ElectricField\r\n//   FluidFlowField\r\n//   FluidVelocityField\r\n//   ForceField\r\n//   GravitationalField\r\n//   MagneticField\r\n//   PotentialField\r\n//   PressureField\r\n//   TemperatureField\r\n// }\r\n\r\nenum Interactions {\r\n  Buoyancy\r\n  Collision\r\n  DragForce\r\n  ElectrostaticForce\r\n  Friction\r\n  Gravity\r\n  MagneticForce\r\n  NormalForce\r\n  SpringForce\r\n  Tension\r\n}\r\n\r\n// enum Materials {\r\n//   Density\r\n//   Elasticity\r\n//   FractureToughnes\r\n//    Hardness\r\n//    Plasticity\r\n//    StressStrain\r\n//   ThermalProperties\r\n//   Viscosity\r\n// }\r\n\r\nenum Motions {\r\n  CombinedTransRotMotion\r\n  DampedOscillation\r\n  LinearMotion\r\n  ProjectileMotion2D\r\n  ProjectileMotion3D\r\n  RelativeMotion\r\n  ResistiveMotion\r\n  RotationalMotion\r\n  SimpleHarmonicMotion\r\n  UniformCircularMotion\r\n}\r\n\r\nenum Objects {\r\n  Object\r\n}\r\n\r\nenum Environments {\r\n  Cliff\r\n  Ground\r\n  Incline\r\n  Wall\r\n}\r\n\r\n// --- AnimationData schema ---\r\nclass AnimationData {\r\n  forces Forces[]\r\n  // fields Fields[]\r\n  interactions Interactions[]\r\n  // materials Materials[]\r\n  motions Motions[]\r\n  objects Objects[]\r\n  environments Environments[]\r\n}\r\n\r\n\r\n//Extra to the prompt (not using currently):   \r\n//materials: [\"Density\", \"Elasticity\", \"FractureToughness\", \"Hardness\", \"Plasticity\", \"StressStrain\", \"ThermalProperties\", \"Viscosity\"]\r\n//  fields: [\"AccelerationField\", \"ElectricField\", \"FluidFlowField\", \"FluidVelocityField\", \"ForceField\", \"GravitationalField\", \"MagneticField\", \"PotentialField\", \"PressureField\", \"TemperatureField\"]\r\n\r\n//Original Prompts Here that I have changed:\r\n\r\n//  forces: [\"AirResistance\", \"AppliedForce\", \"BuoyantForce\", \"CentripetalForce\", \"CoriolisForce\", \"ElectricForce\", \"FrictionForce\", \"GravitationalForce\", \"LiftThrustForce\", \"MagneticForce\", \"NetForce\", \"SpringForce\", \"TensionForce\", \"Torque\"]\r\n\r\n\r\n// --- Step 1: Extract animation types from problem ---\r\nfunction Extract_animation_data(problem: string) -> AnimationData {\r\n  client \"DeepseekChatClient\"\r\n  prompt #\"\"\"\r\n    You are a physics expert. Extract relevant animation categories and types from the following problem.\r\n\r\n  ## Categories:\r\n\r\n  forces: [\"AirResistance\", \"AppliedForce\", \"BuoyantForce\", \"CentripetalForce\", \"FrictionForce\", \"GravitationalForce\", \"NetForce\", \"SpringForce\", \"TensionForce\", \"Torque\", \"NormalForce\"]\r\n  \r\n  interactions: [\"Buoyancy\", \"Collision\", \"Friction\", \"Tension\"]\r\n  \r\n  \r\n  motions: [\"DampedOscillation\", \"LinearMotion\", \"ProjectileMotion2D\", \"ProjectileMotion3D\", \"RotationalMotion\", \"SimpleHarmonicMotion\", \"UniformCircularMotion\"]\r\n  \r\n  objects: [\"Object\"]\r\n\r\n  environments: [\"Cliff\", \"Ground\", \"Incline\", \"Wall\"]\r\n\r\n  ## Instructions:\r\n  - For each detected category (force, motion, etc.), return a complete stub matching the full schema structure of that type, including all required keys (even with placeholder/default values).\r\n  - If the problem involves multiple instances of the same force type applied to different objects, return a separate complete object for each instance.\r\n  - For example, if there are two gravitational forces on two different objects, return two separate \"GravitationalForce\" objects in the forces array.\r\n  - Use empty strings or default numbers (e.g., `0`) for values.\r\n  - Return a full JSON object with arrays for: \"forces\", \"motions\", \"interactions\", and \"objects\".\r\n  - Do NOT leave any schema fields out — include all fields defined in your official JSON schemas.\r\n  - Do NOT invent new types — only use exact names from the lists above.\r\n  - Do NOT merge or combine multiple forces of the same type into one object.\r\n  - This data will be used in a second step to fill in the values.\r\n  - Always assume a NormalForce acts upward on any object unless the problem explicitly states it's in free fall.\r\n  - Use environments to create the animation, if there is a Cliff, Ground, Incline or Wall in the animation, include it.\r\n  - If an incline needs to lay on the ground make the ground environment under it, this goes for all environments if they need the ground environment under it place it.\r\n\r\n\r\n    ## Problem:\r\n    {{problem}}\r\n\r\n  \"\"\"#\r\n}\r\n\r\nfunction Update_Animation_Data(data: string, problem: string) -> string {\r\n  client \"DeepseekChatClient\"\r\n  prompt #\"\"\"\r\nYou are a physics simulation expert.\r\n\r\nGiven structured animation data in JSON format, your task is to fill in realistic physics values based on the provided problem description.\r\n\r\n## CRITICAL REQUIREMENTS:\r\n1. Return the COMPLETE JSON structure exactly as provided\r\n2. Fill in ALL empty or default values with realistic physics data\r\n3. Format ALL values as direct key-value pairs: \"fieldName\": number\r\n4. Keep the exact same JSON structure - do not add, remove, or modify keys\r\n5. Use SI units for all measurements\r\n6. Return ONLY the JSON - no explanations, no markdown, no extra text\r\n7. Any ID value should correspond to the same ID value as the object **IF and ONLY IF the object desires that motion, force, field, interaction, or material**. Match ID's as necessary!\r\n8. Always assume a NormalForce acts upward on any object unless the problem explicitly states it's in free fall.\r\n9. **For multiple objects of the same type (e.g., multiple blocks), assign distinct starting positions in space to prevent overlap or stacking.** Positions should be spaced reasonably apart along the relevant axis (usually the direction of motion, typically the x-axis).\r\n10. If physical dimensions of objects are not specified, assume a default size of about 0.5 meters width and place objects at least that far apart on the axis of motion.\r\n11. Use y=0 as the table or ground level unless the problem states otherwise.\r\n12. For horizontal motion problems, initialize objects’ y positions at zero (on the surface), and set x positions distinctively.\r\n13. For inclined planes or vertical setups, position coordinates must respect geometry implied by the angle and physical constraints.\r\n14. Update environments as needed to make the animation correctly stuctured.\r\n15. If an incline needs to lay on the ground make the ground environment under it, this goes for all environments if they need the ground environment under it place it.\r\n\r\n\r\n\r\n## Value Format Example:\r\n```json\r\n{\r\n  \"initialPosition\": {\r\n    \"x\": 0,\r\n    \"y\": 45\r\n  },\r\n  \"mass\": 2.5,\r\n  \"gravity\": 9.8\r\n}\r\n```\r\n\r\n## Physics Conventions:\r\n- y-axis is vertical (positive up)\r\n- x-axis is horizontal\r\n- Standard gravity: 9.8 m/s²\r\n- Include all objects, forces, and interactions mentioned in the problem\r\n- For springs: include both as force AND object with position\r\n\r\n## Input Data:\r\nProblem: {{problem}}\r\n\r\nJSON Structure: {{data}}\r\n\r\n## Output:\r\nReturn the complete JSON with all values filled as direct numbers (e.g., \"x\": 45, \"mass\": 2.5).\r\n\"\"\"#\r\n}\r\n",
    "ProblemDetection.baml": "class ProblemData {\r\n    problem string\r\n    stepByStep string\r\n    formulas string\r\n    solution string\r\n}\r\n\r\nfunction Extract_ProblemData(data: string) -> ProblemData {\r\n    client \"DeepseekChatClient\"\r\n    prompt #\"\"\"\r\n        Given the physics problem:\r\n\r\n        {{data}}\r\n\r\n        Please respond ONLY with a JSON object containing the following fields:\r\n\r\n        {\r\n        \"problem\": \"<brief restatement of the problem as a plain string>\",\r\n        \"stepByStep\": \"<a very detailed, bullet-pointed step-by-step guide to solving the problem. Each step should be a clear, separate bullet starting with '- ', explaining exactly what to do and why. Include any intermediate calculations and reasoning.>\",\r\n        \"formulas\": \"<a bullet pointed list of different formulas, dont indent them with any kind of bullet just make sure they are all separate.>\",\r\n        \"solution\": \"<a thorough explanation of the final solution, explaining what the answer means physically and why it makes sense>\"\r\n        }\r\n\r\n        Example for stepByStep:\r\n\r\n        \"- First, identify known quantities and what is asked.\\n- Then, write down the key formulas related to the problem.\\n- Next, substitute the known values into the formulas.\\n- Calculate intermediate values step by step.\\n- Finally, solve for the unknown and check units.\"\r\n\r\n        Make sure to return only the JSON object with no additional text or commentary.\r\n        \"\"\"#\r\n}\r\n",
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\r\n\r\nclient<llm> DeepseekChatClient {\r\n  provider openai-generic\r\n  options {\r\n    model \"deepseek-chat\"\r\n    base_url \"https://api.deepseek.com/v1\"\r\n    api_key \"sk-40bc61c061c14be1a62008a4405f2207\"\r\n  }\r\n}\r\n\r\nclient DeepseekR1Client {\r\n  provider openai-generic\r\n  options {\r\n    model \"deepseek-reasoner\"\r\n    base_url \"https://api.deepseek.com/v1\"\r\n    api_key \"sk-40bc61c061c14be1a62008a4405f2207\"\r\n    temperature 0.0\r\n  }\r\n}\r\n\r\n\r\nclient<llm> CustomGPT4o {\r\n  provider openai\r\n  options {\r\n    model \"gpt-4o\"\r\n    api_key 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\r\n  }\r\n}\r\n\r\nclient<llm> CustomGPT4oMini {\r\n  provider openai\r\n  retry_policy Exponential\r\n  options {\r\n    model \"gpt-4o-mini\"\r\n    api_key env.OPENAI_API_KEY\r\n  }\r\n}\r\n\r\nclient<llm> CustomSonnet {\r\n  provider anthropic\r\n  options {\r\n    model \"claude-3-5-sonnet-20241022\"\r\n    api_key env.ANTHROPIC_API_KEY\r\n  }\r\n}\r\n\r\n\r\nclient<llm> CustomHaiku {\r\n  provider anthropic\r\n  retry_policy Constant\r\n  options {\r\n    model \"claude-3-haiku-20240307\"\r\n    api_key env.ANTHROPIC_API_KEY\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\r\nclient<llm> CustomFast {\r\n  provider round-robin\r\n  options {\r\n    // This will alternate between the two clients\r\n    strategy [CustomGPT4oMini, CustomHaiku]\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\r\nclient<llm> OpenaiFallback {\r\n  provider fallback\r\n  options {\r\n    // This will try the clients in order until one succeeds\r\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/retry\r\nretry_policy Constant {\r\n  max_retries 3\r\n  // Strategy is optional\r\n  strategy {\r\n    type constant_delay\r\n    delay_ms 200\r\n  }\r\n}\r\n\r\nretry_policy Exponential {\r\n  max_retries 2\r\n  // Strategy is optional\r\n  strategy {\r\n    type exponential_backoff\r\n    delay_ms 300\r\n    multiplier 1.5\r\n    max_delay_ms 10000\r\n  }\r\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.90.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}",
    "resume.baml": "// Defining a data model.\r\nclass Resume {\r\n  name string\r\n  email string\r\n  experience string[]\r\n  skills string[]\r\n}\r\n\r\n// Create a function to extract the resume from a string.\r\nfunction ExtractResume(resume: string) -> Resume {\r\n  // Specify a client as provider/model-name\r\n  // you can use custom LLM params with a custom client name from clients.baml like \"client CustomHaiku\"\r\n  client \"DeepseekChatClient\" // Set OPENAI_API_KEY to use this client.\r\n  prompt #\"\r\n    Extract from this content:\r\n    {{ resume }}\r\n\r\n    {{ ctx.output_format }}\r\n  \"#\r\n}\r\n\r\n\r\n\r\n// Test the function with a sample resume. Open the VSCode playground to run this.\r\ntest vaibhav_resume {\r\n  functions [ExtractResume]\r\n  args {\r\n    resume #\"\r\n      Vaibhav Gupta\r\n      vbv@boundaryml.com\r\n\r\n      Experience:\r\n      - Founder at BoundaryML\r\n      - CV Engineer at Google\r\n      - CV Engineer at Microsoft\r\n\r\n      Skills:\r\n      - Rust\r\n      - C++\r\n    \"#\r\n  }\r\n}\r\n",
}

def get_baml_files():
    return file_map