###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum

from pydantic import BaseModel, ConfigDict

from typing_extensions import TypeAlias, Literal
from typing import Dict, Generic, List, Optional, TypeVar, Union


T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class Fields(str, Enum):
    
    AccelerationField = "AccelerationField"
    ElectricField = "ElectricField"
    FluidFlowField = "FluidFlowField"
    FluidVelocityField = "FluidVelocityField"
    ForceField = "ForceField"
    GravitationalField = "GravitationalField"
    MagneticField = "MagneticField"
    PotentialField = "PotentialField"
    PressureField = "PressureField"
    TemperatureField = "TemperatureField"

class Forces(str, Enum):
    
    AirResistance = "AirResistance"
    AppliedForce = "AppliedForce"
    BuoyantForce = "BuoyantForce"
    CentripetalForce = "CentripetalForce"
    CoriolisForce = "CoriolisForce"
    ElectricForce = "ElectricForce"
    FrictionForce = "FrictionForce"
    GravitationalForce = "GravitationalForce"
    LiftThrustForce = "LiftThrustForce"
    MagneticForce = "MagneticForce"
    NetForce = "NetForce"
    SpringForce = "SpringForce"
    TensionForce = "TensionForce"
    Torque = "Torque"

class Interactions(str, Enum):
    
    Buoyancy = "Buoyancy"
    Collision = "Collision"
    DragForce = "DragForce"
    ElectrostaticForce = "ElectrostaticForce"
    Friction = "Friction"
    Gravity = "Gravity"
    MagneticForce = "MagneticForce"
    NormalForce = "NormalForce"
    SpringForce = "SpringForce"
    Tension = "Tension"

class Materials(str, Enum):
    
    Density = "Density"
    Elasticity = "Elasticity"
    FractureToughnes = "FractureToughnes"
    Hardness = "Hardness"
    Plasticity = "Plasticity"
    StressStrain = "StressStrain"
    ThermalProperties = "ThermalProperties"
    Viscosity = "Viscosity"

class Motions(str, Enum):
    
    CombinedTransRotMotion = "CombinedTransRotMotion"
    DampedOscillation = "DampedOscillation"
    LinearMotion = "LinearMotion"
    ProjectileMotion2D = "ProjectileMotion2D"
    ProjectileMotion3D = "ProjectileMotion3D"
    RelativeMotion = "RelativeMotion"
    ResistiveMotion = "ResistiveMotion"
    RotationalMotion = "RotationalMotion"
    SimpleHarmonicMotion = "SimpleHarmonicMotion"
    UniformCircularMotion = "UniformCircularMotion"

class Objects(str, Enum):
    
    Object = "Object"

class AnimationData(BaseModel):
    forces: List["Forces"]
    fields: List["Fields"]
    interactions: List["Interactions"]
    materials: List["Materials"]
    motions: List["Motions"]
    objects: List["Objects"]

class Resume(BaseModel):
    name: str
    email: str
    experience: List[str]
    skills: List[str]
