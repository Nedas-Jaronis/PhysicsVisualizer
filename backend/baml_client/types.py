# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (5)
# #########################################################################

class Environments(str, Enum):
    Cliff = "Cliff"
    Ground = "Ground"
    Incline = "Incline"
    Wall = "Wall"
    PulleySystem = "PulleySystem"
    Constraint = "Constraint"
    Pendulum = "Pendulum"

class Forces(str, Enum):
    AirResistance = "AirResistance"
    AppliedForce = "AppliedForce"
    BuoyantForce = "BuoyantForce"
    CentripetalForce = "CentripetalForce"
    CoriolisForce = "CoriolisForce"
    ElectricForce = "ElectricForce"
    FrictionForce = "FrictionForce"
    GravitationalForce = "GravitationalForce"
    LiftThrustForce = "LiftThrustForce"
    MagneticForce = "MagneticForce"
    NetForce = "NetForce"
    SpringForce = "SpringForce"
    TensionForce = "TensionForce"
    Torque = "Torque"
    NormalForce = "NormalForce"

class Interactions(str, Enum):
    Buoyancy = "Buoyancy"
    Collision = "Collision"
    DragForce = "DragForce"
    ElectrostaticForce = "ElectrostaticForce"
    Friction = "Friction"
    Gravity = "Gravity"
    MagneticForce = "MagneticForce"
    NormalForce = "NormalForce"
    SpringForce = "SpringForce"
    Tension = "Tension"

class Motions(str, Enum):
    CombinedTransRotMotion = "CombinedTransRotMotion"
    DampedOscillation = "DampedOscillation"
    LinearMotion = "LinearMotion"
    ProjectileMotion2D = "ProjectileMotion2D"
    ProjectileMotion3D = "ProjectileMotion3D"
    RelativeMotion = "RelativeMotion"
    ResistiveMotion = "ResistiveMotion"
    RotationalMotion = "RotationalMotion"
    SimpleHarmonicMotion = "SimpleHarmonicMotion"
    UniformCircularMotion = "UniformCircularMotion"

class Objects(str, Enum):
    Object = "Object"

# #########################################################################
# Generated classes (2)
# #########################################################################

class AnimationData(BaseModel):
    forces: typing.List[Forces]
    interactions: typing.List[Interactions]
    motions: typing.List[Motions]
    objects: typing.List[Objects]
    environments: typing.List[Environments]

class ProblemData(BaseModel):
    problem: str
    stepByStep: str
    formulas: str
    solution: str

# #########################################################################
# Generated type aliases (0)
# #########################################################################
