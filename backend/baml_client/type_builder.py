###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import typing
from baml_py.baml_py import FieldType, EnumValueBuilder, EnumBuilder, ClassBuilder
from baml_py.type_builder import TypeBuilder as _TypeBuilder, ClassPropertyBuilder, ClassPropertyViewer, EnumValueViewer
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME


class TypeBuilder(_TypeBuilder):
    def __init__(self):
        super().__init__(classes=set(
          ["AnimationData","Resume",]
        ), enums=set(
          ["Forces","Interactions","Motions","Objects",]
        ), runtime=DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME)


    @property
    def AnimationData(self) -> "AnimationDataAst":
        return AnimationDataAst(self)

    @property
    def Resume(self) -> "ResumeAst":
        return ResumeAst(self)





class AnimationDataAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("AnimationData")
        self._properties: typing.Set[str] = set([ "forces",  "interactions",  "motions",  "objects", ])
        self._props = AnimationDataProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "AnimationDataProperties":
        return self._props


class AnimationDataViewer(AnimationDataAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class AnimationDataProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def forces(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("forces"))

    @property
    def interactions(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("interactions"))

    @property
    def motions(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("motions"))

    @property
    def objects(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("objects"))

    

class ResumeAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("Resume")
        self._properties: typing.Set[str] = set([ "name",  "email",  "experience",  "skills", ])
        self._props = ResumeProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ResumeProperties":
        return self._props


class ResumeViewer(ResumeAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class ResumeProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def name(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("name"))

    @property
    def email(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("email"))

    @property
    def experience(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("experience"))

    @property
    def skills(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("skills"))

    



class ForcesAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.enum("Forces")
        self._values: typing.Set[str] = set([ "AirResistance",  "AppliedForce",  "BuoyantForce",  "CentripetalForce",  "CoriolisForce",  "ElectricForce",  "FrictionForce",  "GravitationalForce",  "LiftThrustForce",  "MagneticForce",  "NetForce",  "SpringForce",  "TensionForce",  "Torque", ])
        self._vals = ForcesValues(self._bldr, self._values)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def values(self) -> "ForcesValues":
        return self._vals


class ForcesViewer(ForcesAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    def list_values(self) -> typing.List[typing.Tuple[str, EnumValueViewer]]:
        return [(name, EnumValueViewer(self._bldr.value(name))) for name in self._values]


class ForcesValues:
    def __init__(self, enum_bldr: EnumBuilder, values: typing.Set[str]):
        self.__bldr = enum_bldr
        self.__values = values

    

    @property
    def AirResistance(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("AirResistance"))
    

    @property
    def AppliedForce(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("AppliedForce"))
    

    @property
    def BuoyantForce(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("BuoyantForce"))
    

    @property
    def CentripetalForce(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("CentripetalForce"))
    

    @property
    def CoriolisForce(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("CoriolisForce"))
    

    @property
    def ElectricForce(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("ElectricForce"))
    

    @property
    def FrictionForce(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("FrictionForce"))
    

    @property
    def GravitationalForce(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("GravitationalForce"))
    

    @property
    def LiftThrustForce(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("LiftThrustForce"))
    

    @property
    def MagneticForce(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("MagneticForce"))
    

    @property
    def NetForce(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("NetForce"))
    

    @property
    def SpringForce(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("SpringForce"))
    

    @property
    def TensionForce(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("TensionForce"))
    

    @property
    def Torque(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("Torque"))
    

    

class InteractionsAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.enum("Interactions")
        self._values: typing.Set[str] = set([ "Buoyancy",  "Collision",  "DragForce",  "ElectrostaticForce",  "Friction",  "Gravity",  "MagneticForce",  "NormalForce",  "SpringForce",  "Tension", ])
        self._vals = InteractionsValues(self._bldr, self._values)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def values(self) -> "InteractionsValues":
        return self._vals


class InteractionsViewer(InteractionsAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    def list_values(self) -> typing.List[typing.Tuple[str, EnumValueViewer]]:
        return [(name, EnumValueViewer(self._bldr.value(name))) for name in self._values]


class InteractionsValues:
    def __init__(self, enum_bldr: EnumBuilder, values: typing.Set[str]):
        self.__bldr = enum_bldr
        self.__values = values

    

    @property
    def Buoyancy(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("Buoyancy"))
    

    @property
    def Collision(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("Collision"))
    

    @property
    def DragForce(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("DragForce"))
    

    @property
    def ElectrostaticForce(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("ElectrostaticForce"))
    

    @property
    def Friction(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("Friction"))
    

    @property
    def Gravity(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("Gravity"))
    

    @property
    def MagneticForce(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("MagneticForce"))
    

    @property
    def NormalForce(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("NormalForce"))
    

    @property
    def SpringForce(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("SpringForce"))
    

    @property
    def Tension(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("Tension"))
    

    

class MotionsAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.enum("Motions")
        self._values: typing.Set[str] = set([ "CombinedTransRotMotion",  "DampedOscillation",  "LinearMotion",  "ProjectileMotion2D",  "ProjectileMotion3D",  "RelativeMotion",  "ResistiveMotion",  "RotationalMotion",  "SimpleHarmonicMotion",  "UniformCircularMotion", ])
        self._vals = MotionsValues(self._bldr, self._values)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def values(self) -> "MotionsValues":
        return self._vals


class MotionsViewer(MotionsAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    def list_values(self) -> typing.List[typing.Tuple[str, EnumValueViewer]]:
        return [(name, EnumValueViewer(self._bldr.value(name))) for name in self._values]


class MotionsValues:
    def __init__(self, enum_bldr: EnumBuilder, values: typing.Set[str]):
        self.__bldr = enum_bldr
        self.__values = values

    

    @property
    def CombinedTransRotMotion(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("CombinedTransRotMotion"))
    

    @property
    def DampedOscillation(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("DampedOscillation"))
    

    @property
    def LinearMotion(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("LinearMotion"))
    

    @property
    def ProjectileMotion2D(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("ProjectileMotion2D"))
    

    @property
    def ProjectileMotion3D(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("ProjectileMotion3D"))
    

    @property
    def RelativeMotion(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("RelativeMotion"))
    

    @property
    def ResistiveMotion(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("ResistiveMotion"))
    

    @property
    def RotationalMotion(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("RotationalMotion"))
    

    @property
    def SimpleHarmonicMotion(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("SimpleHarmonicMotion"))
    

    @property
    def UniformCircularMotion(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("UniformCircularMotion"))
    

    

class ObjectsAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.enum("Objects")
        self._values: typing.Set[str] = set([ "Object", ])
        self._vals = ObjectsValues(self._bldr, self._values)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def values(self) -> "ObjectsValues":
        return self._vals


class ObjectsViewer(ObjectsAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    def list_values(self) -> typing.List[typing.Tuple[str, EnumValueViewer]]:
        return [(name, EnumValueViewer(self._bldr.value(name))) for name in self._values]


class ObjectsValues:
    def __init__(self, enum_bldr: EnumBuilder, values: typing.Set[str]):
        self.__bldr = enum_bldr
        self.__values = values

    

    @property
    def Object(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("Object"))
    

    


__all__ = ["TypeBuilder"]