/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { Image, Audio } from "@boundaryml/baml"

/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}


export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export enum Forces {
  AirResistance = "AirResistance",
  AppliedForce = "AppliedForce",
  BuoyantForce = "BuoyantForce",
  CentripetalForce = "CentripetalForce",
  CoriolisForce = "CoriolisForce",
  ElectricForce = "ElectricForce",
  FrictionForce = "FrictionForce",
  GravitationalForce = "GravitationalForce",
  LiftThrustForce = "LiftThrustForce",
  MagneticForce = "MagneticForce",
  NetForce = "NetForce",
  SpringForce = "SpringForce",
  TensionForce = "TensionForce",
  Torque = "Torque",
  NormalForce = "NormalForce",
}

export enum Interactions {
  Buoyancy = "Buoyancy",
  Collision = "Collision",
  DragForce = "DragForce",
  ElectrostaticForce = "ElectrostaticForce",
  Friction = "Friction",
  Gravity = "Gravity",
  MagneticForce = "MagneticForce",
  NormalForce = "NormalForce",
  SpringForce = "SpringForce",
  Tension = "Tension",
}

export enum Motions {
  CombinedTransRotMotion = "CombinedTransRotMotion",
  DampedOscillation = "DampedOscillation",
  LinearMotion = "LinearMotion",
  ProjectileMotion2D = "ProjectileMotion2D",
  ProjectileMotion3D = "ProjectileMotion3D",
  RelativeMotion = "RelativeMotion",
  ResistiveMotion = "ResistiveMotion",
  RotationalMotion = "RotationalMotion",
  SimpleHarmonicMotion = "SimpleHarmonicMotion",
  UniformCircularMotion = "UniformCircularMotion",
}

export enum Objects {
  Object = "Object",
  Incline = "Incline",
}

export interface AnimationData {
  forces: Forces[]
  interactions: Interactions[]
  motions: Motions[]
  objects: Objects[]
  
}

export interface ProblemData {
  problem: string
  stepByStep: string
  formulas: string
  solution: string
  
}

export interface Resume {
  name: string
  email: string
  experience: string[]
  skills: string[]
  
}
